<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/StemHub/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StemHub/.env.example" />
              <option name="updatedContent" value="# Example environment variables for StemHub&#10;# Copy this file to .env and fill in your own values.&#10;&#10;# Database&#10;DB_URL=jdbc:sqlserver://localhost:1433;databaseName=stemhub;encrypt=true;trustServerCertificate=true&#10;DB_USERNAME=sa&#10;DB_PASSWORD=yourStrong(!)Password&#10;&#10;# JWT&#10;# At least 32 characters for HS256 security&#10;JWT_SECRET_KEY=please-change-me-to-a-long-random-secret-string-32chars-min&#10;JWT_EXPIRATION_MS=86400000&#10;&#10;# Cloudflare R2&#10;R2_ACCOUNT_ID=your-account-id&#10;R2_ACCESS_KEY=your-access-key&#10;R2_SECRET_KEY=your-secret-key&#10;R2_BUCKET=your-bucket-name&#10;# Endpoint should NOT include the bucket path. Example:&#10;#   Correct: https://&lt;account-id&gt;.r2.cloudflarestorage.com&#10;#   Wrong:   https://&lt;account-id&gt;.r2.cloudflarestorage.com/&lt;bucket&gt;&#10;R2_ENDPOINT_URL=https://&lt;account-id&gt;.r2.cloudflarestorage.com&#10;R2_PUBLIC_URL=https://pub-&lt;hash&gt;.r2.dev&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StemHub/src/main/java/com/team7/StemHub/dao/DocumentRepo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StemHub/src/main/java/com/team7/StemHub/dao/DocumentRepo.java" />
              <option name="originalContent" value="package com.team7.StemHub.dao;&#10;&#10;import com.team7.StemHub.model.Course;&#10;import com.team7.StemHub.model.Document;&#10;import com.team7.StemHub.model.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface DocumentRepo extends JpaRepository&lt;Document, UUID&gt; {&#10;    List&lt;Document&gt; findTop20ByOrderByCreateAtDesc();&#10;&#10;    List&lt;Document&gt; findTop10ByOrderByDownloadCountDesc();&#10;&#10;    @Query(&quot;SELECT COUNT(DISTINCT u.id) FROM User u JOIN u.favoritesDocuments d WHERE d.id = :documentId&quot;)&#10;    Long countFavoritesById(@Param(&quot;documentId&quot;) UUID documentId);&#10;&#10;    List&lt;Document&gt; findByCourse(Course course);&#10;&#10;    List&lt;Document&gt; findAllByAuthor(User user);&#10;}&#10;" />
              <option name="updatedContent" value="package com.team7.StemHub.dao;&#10;&#10;import com.team7.StemHub.model.Course;&#10;import com.team7.StemHub.model.Document;&#10;import com.team7.StemHub.model.User;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.Query;&#10;import org.springframework.data.repository.query.Param;&#10;import org.springframework.stereotype.Repository;&#10;&#10;import java.util.List;&#10;import java.util.UUID;&#10;&#10;@Repository&#10;public interface DocumentRepo extends JpaRepository&lt;Document, UUID&gt; {&#10;    List&lt;Document&gt; findTop20ByOrderByCreateAtDesc();&#10;&#10;    List&lt;Document&gt; findTop10ByOrderByDownloadCountDesc();&#10;&#10;    @Query(&quot;SELECT COUNT(DISTINCT u.id) FROM User u JOIN u.favoritesDocuments d WHERE d.id = :documentId&quot;)&#10;    Long countFavoritesById(@Param(&quot;documentId&quot;) UUID documentId);&#10;&#10;    List&lt;Document&gt; findByCourse(Course course);&#10;&#10;    List&lt;Document&gt; findAllByAuthor(User user);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StemHub/src/main/java/com/team7/StemHub/service/DocumentService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StemHub/src/main/java/com/team7/StemHub/service/DocumentService.java" />
              <option name="originalContent" value="package com.team7.StemHub.service;&#10;&#10;import com.team7.StemHub.dao.DocumentRepo;&#10;import com.team7.StemHub.exception.NotFoundException;&#10;import com.team7.StemHub.model.Course;&#10;import com.team7.StemHub.model.Document;&#10;import com.team7.StemHub.model.User;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class DocumentService {&#10;&#10;    private final DocumentRepo documentRepo;&#10;&#10;    public Long countFavorites(UUID documentId) {&#10;        return documentRepo.countFavoritesById(documentId);&#10;    }&#10;&#10;    public Document saveDocument(Document document) {&#10;        return documentRepo.save(document);&#10;    }&#10;&#10;    public List&lt;Document&gt; getTopDocument() {&#10;        return documentRepo.findTop10ByOrderByDownloadCountDesc();&#10;    }&#10;&#10;    public List&lt;Document&gt; getNewestDocuments() {&#10;        return documentRepo.findTop20ByOrderByCreateAtDesc();&#10;    }&#10;&#10;    public Document getDocumentById(UUID id) {&#10;        return documentRepo.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Document not found with id: &quot; + id));&#10;    }&#10;&#10;    public List&lt;Document&gt; getDocumentsByCourse(Course course) {&#10;        return documentRepo.findByCourse(course);&#10;    }&#10;&#10;    public void downloadDocument(UUID documentId) {&#10;        Document document = getDocumentById(documentId);&#10;        document.setDownloadCount(document.getDownloadCount() + 1);&#10;        documentRepo.save(document);&#10;    }&#10;&#10;    public List&lt;Document&gt; getAllUploadDocumentsByAuthor(User user) {&#10;        return documentRepo.findAllByAuthor(user);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.team7.StemHub.service;&#10;&#10;import com.team7.StemHub.dao.DocumentRepo;&#10;import com.team7.StemHub.exception.NotFoundException;&#10;import com.team7.StemHub.model.Course;&#10;import com.team7.StemHub.model.Document;&#10;import com.team7.StemHub.model.User;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;import java.util.Set;&#10;import java.util.UUID;&#10;&#10;@Service&#10;@RequiredArgsConstructor&#10;public class DocumentService {&#10;&#10;    private final DocumentRepo documentRepo;&#10;&#10;    public Long countFavorites(UUID documentId) {&#10;        return documentRepo.countFavoritesById(documentId);&#10;    }&#10;&#10;    public Document saveDocument(Document document) {&#10;        return documentRepo.save(document);&#10;    }&#10;&#10;    public List&lt;Document&gt; getTopDocument() {&#10;        return documentRepo.findTop10ByOrderByDownloadCountDesc();&#10;    }&#10;&#10;    public List&lt;Document&gt; getNewestDocuments() {&#10;        return documentRepo.findTop20ByOrderByCreateAtDesc();&#10;    }&#10;&#10;    public Document getDocumentById(UUID id) {&#10;        return documentRepo.findById(id)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Document not found with id: &quot; + id));&#10;    }&#10;&#10;    public List&lt;Document&gt; getDocumentsByCourse(Course course) {&#10;        return documentRepo.findByCourse(course);&#10;    }&#10;&#10;    public void downloadDocument(UUID documentId) {&#10;        Document document = getDocumentById(documentId);&#10;        document.setDownloadCount(document.getDownloadCount() + 1);&#10;        documentRepo.save(document);&#10;    }&#10;&#10;    public List&lt;Document&gt; getAllUploadDocumentsByAuthor(User user) {&#10;        return documentRepo.findAllByAuthor(user);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/StemHub/src/main/resources/static/script/home/detail.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/StemHub/src/main/resources/static/script/home/detail.js" />
              <option name="originalContent" value="// Add CSRF token for AJAX requests&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Create CSRF token element if it doesn't exist&#10;    if (!document.querySelector('[name=csrfmiddlewaretoken]')) {&#10;        const csrfToken = document.createElement('input');&#10;        csrfToken.type = 'hidden';&#10;        csrfToken.name = 'csrfmiddlewaretoken';&#10;        csrfToken.value = '{{ csrf_token }}';&#10;        document.body.appendChild(csrfToken);&#10;    }&#10;    &#10;    // Enhanced notification handling&#10;    enhanceNotifications();&#10;&#10;    // Like button wiring&#10;    const likeBtn = document.getElementById('likeBtn');&#10;    if (likeBtn) {&#10;        likeBtn.addEventListener('click', async (e) =&gt; {&#10;            e.preventDefault();&#10;            const documentId = likeBtn.getAttribute('data-document-id');&#10;            const userId = likeBtn.getAttribute('data-user-id');&#10;&#10;            if (!userId) {&#10;                // Not logged in -&gt; redirect to login&#10;                window.location.href = '/auth/login';&#10;                return;&#10;            }&#10;            if (!documentId) return;&#10;&#10;            // UI: disable and show spinner&#10;            const originalHtml = likeBtn.innerHTML;&#10;            likeBtn.disabled = true;&#10;            likeBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-2&quot;&gt;&lt;/i&gt;Đang xử lý';&#10;&#10;            try {&#10;                const params = new URLSearchParams({ userId, documentId });&#10;                const res = await fetch('/like', {&#10;                    method: 'POST',&#10;                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },&#10;                    body: params.toString(),&#10;                    redirect: 'follow'&#10;                });&#10;&#10;                if (!res.ok) throw new Error('Like request failed');&#10;&#10;                // Optimistically update count and style&#10;                const likeCountEl = document.getElementById('likeCount');&#10;                if (likeCountEl) {&#10;                    const current = parseInt(likeCountEl.textContent || '0', 10) || 0;&#10;                    likeCountEl.textContent = String(current + 1);&#10;                }&#10;                likeBtn.classList.remove('btn-outline-danger');&#10;                likeBtn.classList.add('btn-danger');&#10;                likeBtn.innerHTML = '&lt;i class=&quot;fas fa-heart me-2&quot;&gt;&lt;/i&gt;Đã yêu thích';&#10;            } catch (err) {&#10;                console.error(err);&#10;                alert('Không thể yêu thích tài liệu. Vui lòng thử lại.');&#10;                likeBtn.innerHTML = originalHtml;&#10;            } finally {&#10;                // Keep disabled to avoid spamming multiple likes&#10;                likeBtn.disabled = true;&#10;            }&#10;        });&#10;    }&#10;&#10;    // Download button wiring&#10;    const downloadBtn = document.getElementById('downloadBtn');&#10;    if (downloadBtn) {&#10;        downloadBtn.addEventListener('click', async (e) =&gt; {&#10;            // We want to count download then proceed to actual file&#10;            e.preventDefault();&#10;            const documentId = downloadBtn.getAttribute('data-document-id');&#10;            const fileUrl = downloadBtn.getAttribute('data-file-url') || downloadBtn.getAttribute('href');&#10;            if (!documentId || !fileUrl) {&#10;                // fallback: navigate to file&#10;                window.open(downloadBtn.getAttribute('href'), '_blank');&#10;                return;&#10;            }&#10;&#10;            const originalHtml = downloadBtn.innerHTML;&#10;            downloadBtn.classList.add('disabled');&#10;            downloadBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-2&quot;&gt;&lt;/i&gt;Đang tải...';&#10;&#10;            try {&#10;                const params = new URLSearchParams({ documentId });&#10;                const res = await fetch('/download', {&#10;                    method: 'POST',&#10;                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },&#10;                    body: params.toString(),&#10;                    redirect: 'follow'&#10;                });&#10;                // Even if not ok, proceed with download to not block user&#10;                const downloadCountEl = document.getElementById('downloadCount');&#10;                if (downloadCountEl) {&#10;                    const current = parseInt(downloadCountEl.textContent || '0', 10) || 0;&#10;                    downloadCountEl.textContent = String(current + 1);&#10;                }&#10;            } catch (err) {&#10;                console.warn('Download count failed, proceeding anyway:', err);&#10;            } finally {&#10;                // Proceed to actual file download in new tab&#10;                try {&#10;                    const a = document.createElement('a');&#10;                    a.href = fileUrl;&#10;                    a.target = '_blank';&#10;                    a.rel = 'noopener';&#10;                    a.download = '';&#10;                    document.body.appendChild(a);&#10;                    a.click();&#10;                    a.remove();&#10;                } catch (openErr) {&#10;                    // fallback&#10;                    window.open(fileUrl, '_blank');&#10;                }&#10;                downloadBtn.classList.remove('disabled');&#10;                downloadBtn.innerHTML = originalHtml;&#10;            }&#10;        });&#10;    }&#10;});&#10;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Hide loading overlay after a delay if onload events don't trigger&#10;    setTimeout(hideLoading, 3000);&#10;    &#10;    // Debug video loading&#10;    const video = document.querySelector('video');&#10;    if (video) {&#10;        console.log('Video element found:', video.src);&#10;        &#10;        video.addEventListener('loadstart', () =&gt; {&#10;            console.log('Video: Load started');&#10;        });&#10;        &#10;        video.addEventListener('loadedmetadata', () =&gt; {&#10;            console.log('Video: Metadata loaded');&#10;        });&#10;        &#10;        video.addEventListener('loadeddata', () =&gt; {&#10;            console.log('Video: Data loaded');&#10;            hideLoading();&#10;        });&#10;        &#10;        video.addEventListener('canplay', () =&gt; {&#10;            console.log('Video: Can play');&#10;            hideLoading();&#10;        });&#10;        &#10;        video.addEventListener('error', (e) =&gt; {&#10;            console.error('Video error:', e);&#10;            console.error('Video error details:', video.error);&#10;            hideLoading();&#10;        });&#10;    }&#10;});&#10;&#10;function hideLoading() {&#10;    const loadingOverlay = document.getElementById('loadingOverlay');&#10;    if (loadingOverlay) {&#10;        loadingOverlay.style.display = 'none';&#10;    }&#10;}&#10;&#10;function showVideoFallback(videoElement) {&#10;    console.error('Video failed to load, showing fallback');&#10;    hideLoading();&#10;    &#10;    // Create fallback content&#10;    const fallbackHTML = `&#10;        &lt;div class=&quot;video-fallback&quot;&gt;&#10;            &lt;div class=&quot;video-placeholder&quot;&gt;&#10;                &lt;i class=&quot;fas fa-exclamation-triangle fa-3x mb-3&quot; style=&quot;color: #dc3545;&quot;&gt;&lt;/i&gt;&#10;                &lt;h5&gt;Không thể phát video&lt;/h5&gt;&#10;                &lt;p class=&quot;text-muted mb-3&quot;&gt;Video có thể bị lỗi hoặc định dạng không được hỗ trợ&lt;/p&gt;&#10;                &lt;a href=&quot;${videoElement.querySelector('source').src}&quot; &#10;                   class=&quot;btn btn-primary&quot; &#10;                   target=&quot;_blank&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-download me-2&quot;&gt;&lt;/i&gt;Tải xuống video&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    `;&#10;    &#10;    // Replace video with fallback&#10;    const videoViewer = videoElement.closest('.video-viewer');&#10;    if (videoViewer) {&#10;        videoViewer.innerHTML = fallbackHTML;&#10;    }&#10;}&#10;&#10;function showAdvancedFallback(videoElement) {&#10;    console.error('Advanced video failed to load, showing fallback options');&#10;    hideLoading();&#10;    &#10;    // Hide the video element&#10;    if (videoElement) {&#10;        videoElement.style.display = 'none';&#10;    }&#10;    &#10;    // Show the final fallback&#10;    const container = videoElement.closest('.advanced-video-container');&#10;    if (container) {&#10;        const finalFallback = container.querySelector('.final-fallback');&#10;        if (finalFallback) {&#10;            finalFallback.style.display = 'block';&#10;        }&#10;    }&#10;}&#10;&#10;function tryAlternativeViewers(buttonElement) {&#10;    const container = buttonElement.closest('.advanced-video-container');&#10;    if (container) {&#10;        const alternativeViewers = container.querySelector('.alternative-viewers');&#10;        const finalFallback = container.querySelector('.final-fallback');&#10;        &#10;        if (alternativeViewers &amp;&amp; finalFallback) {&#10;            // Hide final fallback and show alternative viewers&#10;            finalFallback.style.display = 'none';&#10;            alternativeViewers.style.display = 'block';&#10;            &#10;            // Add back button&#10;            const backButton = document.createElement('button');&#10;            backButton.className = 'btn btn-outline-secondary mb-3';&#10;            backButton.innerHTML = '&lt;i class=&quot;fas fa-arrow-left me-2&quot;&gt;&lt;/i&gt;Quay lại';&#10;            backButton.onclick = function() {&#10;                alternativeViewers.style.display = 'none';&#10;                finalFallback.style.display = 'block';&#10;            };&#10;            alternativeViewers.insertBefore(backButton, alternativeViewers.firstChild);&#10;        }&#10;    }&#10;}&#10;&#10;function openInNewTab(url) {&#10;    window.open(url, '_blank');&#10;}&#10;&#10;// Add video format detection&#10;function detectVideoFormat(filename) {&#10;    const extension = filename.toLowerCase().split('.').pop();&#10;    const formats = {&#10;        'mp4': { type: 'video/mp4', supported: true },&#10;        'webm': { type: 'video/webm', supported: true },&#10;        'avi': { type: 'video/x-msvideo', supported: false },&#10;        'mov': { type: 'video/quicktime', supported: false },&#10;        'wmv': { type: 'video/x-ms-wmv', supported: false },&#10;        'flv': { type: 'video/x-flv', supported: false },&#10;        'mkv': { type: 'video/x-matroska', supported: false }&#10;    };&#10;    &#10;    return formats[extension] || { type: 'video/mp4', supported: false };&#10;}&#10;&#10;function shareFile() {&#10;    if (navigator.share) {&#10;        navigator.share({&#10;            title: '{{ file.title }}',&#10;            text: '{{ file.file_description|truncatechars:100 }}',&#10;            url: window.location.href&#10;        });&#10;    } else {&#10;        // Fallback - copy to clipboard&#10;        navigator.clipboard.writeText(window.location.href).then(() =&gt; {&#10;            alert('Đã sao chép liên kết vào clipboard!');&#10;        });&#10;    }&#10;}&#10;&#10;function reportFile() {&#10;    if (confirm('Bạn có chắc chắn muốn báo cáo tài liệu này?')) {&#10;        alert('Cảm ơn bạn đã báo cáo. Chúng tôi sẽ xem xét trong thời gian sớm nhất.');&#10;    }&#10;}&#10;&#10;function getCookie(name) {&#10;    let cookieValue = null;&#10;    if (document.cookie &amp;&amp; document.cookie !== '') {&#10;        const cookies = document.cookie.split(';');&#10;        for (let i = 0; i &lt; cookies.length; i++) {&#10;            const cookie = cookies[i].trim();&#10;            // cookie = &quot;csrftoken=abc123&quot;&#10;            if (cookie.substring(0, name.length + 1) === (name + '=')) {&#10;                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));&#10;                break;&#10;            }&#10;        }&#10;    }&#10;    return cookieValue;&#10;}&#10;&#10;function toggleFavorite() {&#10;    const fileId = document.getElementById('favoriteBtn')?.getAttribute('data-file-id');&#10;    const btn = document.getElementById('favoriteBtn');&#10;    const icon = document.getElementById('favoriteIcon');&#10;    const text = document.getElementById('favoriteText');&#10;    &#10;    if (!fileId || !btn || !icon || !text) return;&#10;&#10;    fetch(`/toggle-favorite/${fileId}/`, {&#10;        method: 'POST',&#10;        headers: {&#10;            'X-CSRFToken': getCookie('csrftoken'),&#10;            'Content-Type': 'application/json',&#10;        },&#10;    })&#10;    .then(response =&gt; response.json())&#10;    .then(data =&gt; {&#10;        if (data.success) {&#10;            if (data.is_favorited) {&#10;                icon.classList.remove('far');&#10;                icon.classList.add('fas');&#10;                text.textContent = 'Bỏ yêu thích';&#10;                btn.classList.remove('btn-outline-danger');&#10;                btn.classList.add('btn-danger');&#10;            } else {&#10;        icon.classList.remove('fas');&#10;        icon.classList.add('far');&#10;                text.textContent = 'Thêm vào yêu thích';&#10;                btn.classList.remove('btn-danger');&#10;                btn.classList.add('btn-outline-danger');&#10;            }&#10;            &#10;            // Show success message&#10;            const toast = document.createElement('div');&#10;            toast.className = 'alert alert-success position-fixed';&#10;            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';&#10;            toast.textContent = data.message;&#10;            document.body.appendChild(toast);&#10;            &#10;            setTimeout(() =&gt; {&#10;                toast.remove();&#10;            }, 3000);&#10;        }&#10;    })&#10;    .catch(error =&gt; {&#10;        console.error('Error:', error);&#10;        alert('Có lỗi xảy ra. Vui lòng thử lại.');&#10;    });&#10;}&#10;&#10;// Track file views (could be enhanced with analytics)&#10;if (typeof gtag !== 'undefined') {&#10;    gtag('event', 'file_view', {&#10;        'file_title': '{{ file.title }}',&#10;        'file_author': '{{ file.author.username }}'&#10;    });&#10;}&#10;&#10;// Enhanced notification system&#10;function enhanceNotifications() {&#10;    const alerts = document.querySelectorAll('.alert');&#10;    &#10;    alerts.forEach((alert, index) =&gt; {&#10;        // Add staggered animation delay&#10;        alert.style.animationDelay = `${index * 0.15}s`;&#10;        &#10;        // Auto-hide after 6 seconds for info messages (trừ điểm)&#10;        if (alert.classList.contains('alert-info')) {&#10;            setTimeout(() =&gt; {&#10;                if (alert.parentNode) {&#10;                    alert.style.animation = 'slideOutRight 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';&#10;                    setTimeout(() =&gt; {&#10;                        if (alert.parentNode) {&#10;                            alert.remove();&#10;                        }&#10;                    }, 500);&#10;                }&#10;            }, 6000);&#10;        }&#10;        &#10;        // Auto-hide after 8 seconds for success messages (cộng điểm)&#10;        if (alert.classList.contains('alert-success')) {&#10;            setTimeout(() =&gt; {&#10;                if (alert.parentNode) {&#10;                    alert.style.animation = 'slideOutRight 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';&#10;                    setTimeout(() =&gt; {&#10;                        if (alert.parentNode) {&#10;                            alert.remove();&#10;                        }&#10;                    }, 500);&#10;                }&#10;            }, 8000);&#10;        }&#10;        &#10;        // Enhanced close button with smooth animation&#10;        const closeBtn = alert.querySelector('.btn-close');&#10;        if (closeBtn) {&#10;            closeBtn.addEventListener('click', function() {&#10;                alert.style.animation = 'slideOutRight 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';&#10;                setTimeout(() =&gt; {&#10;                    if (alert.parentNode) {&#10;                        alert.remove();&#10;                    }&#10;                }, 500);&#10;            });&#10;        }&#10;        &#10;        // Add subtle entrance effect&#10;        alert.style.opacity = '0';&#10;        alert.style.transform = 'translateX(100%) scale(0.95)';&#10;        &#10;        setTimeout(() =&gt; {&#10;            alert.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';&#10;            alert.style.opacity = '1';&#10;            alert.style.transform = 'translateX(0) scale(1)';&#10;        }, index * 150);&#10;    });&#10;}&#10;&#10;// Add slideOutRight animation to CSS&#10;const style = document.createElement('style');&#10;style.textContent = `&#10;    @keyframes slideOutRight {&#10;        from {&#10;            transform: translateX(0) scale(1);&#10;            opacity: 1;&#10;        }&#10;        to {&#10;            transform: translateX(100%) scale(0.95);&#10;            opacity: 0;&#10;        }&#10;    }&#10;`;&#10;document.head.appendChild(style);" />
              <option name="updatedContent" value="// Add CSRF token for AJAX requests&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Create CSRF token element if it doesn't exist&#10;    if (!document.querySelector('[name=csrfmiddlewaretoken]')) {&#10;        const csrfToken = document.createElement('input');&#10;        csrfToken.type = 'hidden';&#10;        csrfToken.name = 'csrfmiddlewaretoken';&#10;        csrfToken.value = '{{ csrf_token }}';&#10;        document.body.appendChild(csrfToken);&#10;    }&#10;    &#10;    // Enhanced notification handling&#10;    enhanceNotifications();&#10;&#10;    // Like button wiring (toggle like/unlike)&#10;    const likeBtn = document.getElementById('likeBtn');&#10;    if (likeBtn) {&#10;        likeBtn.addEventListener('click', async (e) =&gt; {&#10;            e.preventDefault();&#10;            const documentId = likeBtn.getAttribute('data-document-id');&#10;            const userId = likeBtn.getAttribute('data-user-id');&#10;            let liked = String(likeBtn.getAttribute('data-liked')) === 'true';&#10;&#10;            if (!userId) {&#10;                // Not logged in -&gt; redirect to login&#10;                window.location.href = '/auth/login';&#10;                return;&#10;            }&#10;            if (!documentId) return;&#10;&#10;            // UI: disable and show spinner (preserve label and icon)&#10;            const iconEl = likeBtn.querySelector('i');&#10;            const labelEl = document.getElementById('likeLabel');&#10;            const originalIconClass = iconEl ? iconEl.className : '';&#10;            const originalLabel = labelEl ? labelEl.textContent : '';&#10;            likeBtn.disabled = true;&#10;            if (labelEl) labelEl.textContent = 'Đang xử lý...';&#10;            if (iconEl) iconEl.className = 'fas fa-spinner fa-spin me-2';&#10;&#10;            try {&#10;                const params = new URLSearchParams({ userId, documentId });&#10;                const res = await fetch('/like', {&#10;                    method: 'POST',&#10;                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },&#10;                    body: params.toString(),&#10;                    redirect: 'follow'&#10;                });&#10;&#10;                if (!res.ok) throw new Error('Like request failed');&#10;&#10;                // Toggle UI state&#10;                const likeCountEl = document.getElementById('likeCount');&#10;                const current = parseInt(likeCountEl?.textContent || '0', 10) || 0;&#10;                if (liked) {&#10;                    // Was liked -&gt; now unlike&#10;                    const newCount = Math.max(0, current - 1);&#10;                    if (likeCountEl) likeCountEl.textContent = String(newCount);&#10;                    likeBtn.classList.remove('btn-danger');&#10;                    likeBtn.classList.add('btn-outline-danger');&#10;                    if (iconEl) iconEl.className = 'far fa-heart me-2';&#10;                    if (labelEl) labelEl.textContent = 'Yêu thích';&#10;                    likeBtn.setAttribute('data-liked', 'false');&#10;                    liked = false;&#10;                } else {&#10;                    // Was not liked -&gt; now like&#10;                    if (likeCountEl) likeCountEl.textContent = String(current + 1);&#10;                    likeBtn.classList.remove('btn-outline-danger');&#10;                    likeBtn.classList.add('btn-danger');&#10;                    if (iconEl) iconEl.className = 'fas fa-heart me-2';&#10;                    if (labelEl) labelEl.textContent = 'Bỏ yêu thích';&#10;                    likeBtn.setAttribute('data-liked', 'true');&#10;                    liked = true;&#10;                }&#10;            } catch (err) {&#10;                console.error(err);&#10;                // Restore UI on error&#10;                if (iconEl) iconEl.className = originalIconClass;&#10;                if (labelEl) labelEl.textContent = originalLabel || 'Yêu thích';&#10;                alert('Không thể cập nhật yêu thích. Vui lòng thử lại.');&#10;            } finally {&#10;                likeBtn.disabled = false;&#10;            }&#10;        });&#10;    }&#10;&#10;    // Download button wiring&#10;    const downloadBtn = document.getElementById('downloadBtn');&#10;    if (downloadBtn) {&#10;        downloadBtn.addEventListener('click', async (e) =&gt; {&#10;            // We want to count download then proceed to actual file&#10;            e.preventDefault();&#10;            const documentId = downloadBtn.getAttribute('data-document-id');&#10;            const fileUrl = downloadBtn.getAttribute('data-file-url') || downloadBtn.getAttribute('href');&#10;            if (!documentId || !fileUrl) {&#10;                // fallback: navigate to file&#10;                window.open(downloadBtn.getAttribute('href'), '_blank');&#10;                return;&#10;            }&#10;&#10;            const originalHtml = downloadBtn.innerHTML;&#10;            downloadBtn.classList.add('disabled');&#10;            downloadBtn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-2&quot;&gt;&lt;/i&gt;Đang tải...';&#10;&#10;            try {&#10;                const params = new URLSearchParams({ documentId });&#10;                await fetch('/download', {&#10;                    method: 'POST',&#10;                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },&#10;                    body: params.toString(),&#10;                    redirect: 'follow'&#10;                });&#10;                // Even if not ok, proceed with download to not block user&#10;                const downloadCountEl = document.getElementById('downloadCount');&#10;                if (downloadCountEl) {&#10;                    const current = parseInt(downloadCountEl.textContent || '0', 10) || 0;&#10;                    downloadCountEl.textContent = String(current + 1);&#10;                }&#10;            } catch (err) {&#10;                console.warn('Download count failed, proceeding anyway:', err);&#10;            } finally {&#10;                // Proceed to actual file download in new tab&#10;                try {&#10;                    const a = document.createElement('a');&#10;                    a.href = fileUrl;&#10;                    a.target = '_blank';&#10;                    a.rel = 'noopener';&#10;                    a.download = '';&#10;                    document.body.appendChild(a);&#10;                    a.click();&#10;                    a.remove();&#10;                } catch (openErr) {&#10;                    // fallback&#10;                    window.open(fileUrl, '_blank');&#10;                }&#10;                downloadBtn.classList.remove('disabled');&#10;                downloadBtn.innerHTML = originalHtml;&#10;            }&#10;        });&#10;    }&#10;});&#10;&#10;document.addEventListener('DOMContentLoaded', function() {&#10;    // Hide loading overlay after a delay if onload events don't trigger&#10;    setTimeout(hideLoading, 3000);&#10;    &#10;    // Debug video loading&#10;    const video = document.querySelector('video');&#10;    if (video) {&#10;        console.log('Video element found:', video.src);&#10;        &#10;        video.addEventListener('loadstart', () =&gt; {&#10;            console.log('Video: Load started');&#10;        });&#10;        &#10;        video.addEventListener('loadedmetadata', () =&gt; {&#10;            console.log('Video: Metadata loaded');&#10;        });&#10;        &#10;        video.addEventListener('loadeddata', () =&gt; {&#10;            console.log('Video: Data loaded');&#10;            hideLoading();&#10;        });&#10;        &#10;        video.addEventListener('canplay', () =&gt; {&#10;            console.log('Video: Can play');&#10;            hideLoading();&#10;        });&#10;        &#10;        video.addEventListener('error', (e) =&gt; {&#10;            console.error('Video error:', e);&#10;            console.error('Video error details:', video.error);&#10;            hideLoading();&#10;        });&#10;    }&#10;});&#10;&#10;function hideLoading() {&#10;    const loadingOverlay = document.getElementById('loadingOverlay');&#10;    if (loadingOverlay) {&#10;        loadingOverlay.style.display = 'none';&#10;    }&#10;}&#10;&#10;function showVideoFallback(videoElement) {&#10;    console.error('Video failed to load, showing fallback');&#10;    hideLoading();&#10;    &#10;    // Create fallback content&#10;    const fallbackHTML = `&#10;        &lt;div class=&quot;video-fallback&quot;&gt;&#10;            &lt;div class=&quot;video-placeholder&quot;&gt;&#10;                &lt;i class=&quot;fas fa-exclamation-triangle fa-3x mb-3&quot; style=&quot;color: #dc3545;&quot;&gt;&lt;/i&gt;&#10;                &lt;h5&gt;Không thể phát video&lt;/h5&gt;&#10;                &lt;p class=&quot;text-muted mb-3&quot;&gt;Video có thể bị lỗi hoặc định dạng không được hỗ trợ&lt;/p&gt;&#10;                &lt;a href=&quot;${videoElement.querySelector('source').src}&quot; &#10;                   class=&quot;btn btn-primary&quot; &#10;                   target=&quot;_blank&quot;&gt;&#10;                    &lt;i class=&quot;fas fa-download me-2&quot;&gt;&lt;/i&gt;Tải xuống video&#10;                &lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    `;&#10;    &#10;    // Replace video with fallback&#10;    const videoViewer = videoElement.closest('.video-viewer');&#10;    if (videoViewer) {&#10;        videoViewer.innerHTML = fallbackHTML;&#10;    }&#10;}&#10;&#10;function showAdvancedFallback(videoElement) {&#10;    console.error('Advanced video failed to load, showing fallback options');&#10;    hideLoading();&#10;    &#10;    // Hide the video element&#10;    if (videoElement) {&#10;        videoElement.style.display = 'none';&#10;    }&#10;    &#10;    // Show the final fallback&#10;    const container = videoElement.closest('.advanced-video-container');&#10;    if (container) {&#10;        const finalFallback = container.querySelector('.final-fallback');&#10;        if (finalFallback) {&#10;            finalFallback.style.display = 'block';&#10;        }&#10;    }&#10;}&#10;&#10;function tryAlternativeViewers(buttonElement) {&#10;    const container = buttonElement.closest('.advanced-video-container');&#10;    if (container) {&#10;        const alternativeViewers = container.querySelector('.alternative-viewers');&#10;        const finalFallback = container.querySelector('.final-fallback');&#10;        &#10;        if (alternativeViewers &amp;&amp; finalFallback) {&#10;            // Hide final fallback and show alternative viewers&#10;            finalFallback.style.display = 'none';&#10;            alternativeViewers.style.display = 'block';&#10;            &#10;            // Add back button&#10;            const backButton = document.createElement('button');&#10;            backButton.className = 'btn btn-outline-secondary mb-3';&#10;            backButton.innerHTML = '&lt;i class=&quot;fas fa-arrow-left me-2&quot;&gt;&lt;/i&gt;Quay lại';&#10;            backButton.onclick = function() {&#10;                alternativeViewers.style.display = 'none';&#10;                finalFallback.style.display = 'block';&#10;            };&#10;            alternativeViewers.insertBefore(backButton, alternativeViewers.firstChild);&#10;        }&#10;    }&#10;}&#10;&#10;function openInNewTab(url) {&#10;    window.open(url, '_blank');&#10;}&#10;&#10;// Add video format detection&#10;function detectVideoFormat(filename) {&#10;    const extension = filename.toLowerCase().split('.').pop();&#10;    const formats = {&#10;        'mp4': { type: 'video/mp4', supported: true },&#10;        'webm': { type: 'video/webm', supported: true },&#10;        'avi': { type: 'video/x-msvideo', supported: false },&#10;        'mov': { type: 'video/quicktime', supported: false },&#10;        'wmv': { type: 'video/x-ms-wmv', supported: false },&#10;        'flv': { type: 'video/x-flv', supported: false },&#10;        'mkv': { type: 'video/x-matroska', supported: false }&#10;    };&#10;    &#10;    return formats[extension] || { type: 'video/mp4', supported: false };&#10;}&#10;&#10;function shareFile() {&#10;    if (navigator.share) {&#10;        navigator.share({&#10;            title: '{{ file.title }}',&#10;            text: '{{ file.file_description|truncatechars:100 }}',&#10;            url: window.location.href&#10;        });&#10;    } else {&#10;        // Fallback - copy to clipboard&#10;        navigator.clipboard.writeText(window.location.href).then(() =&gt; {&#10;            alert('Đã sao chép liên kết vào clipboard!');&#10;        });&#10;    }&#10;}&#10;&#10;function reportFile() {&#10;    if (confirm('Bạn có chắc chắn muốn báo cáo tài liệu này?')) {&#10;        alert('Cảm ơn bạn đã báo cáo. Chúng tôi sẽ xem xét trong thời gian sớm nhất.');&#10;    }&#10;}&#10;&#10;function getCookie(name) {&#10;    let cookieValue = null;&#10;    if (document.cookie &amp;&amp; document.cookie !== '') {&#10;        const cookies = document.cookie.split(';');&#10;        for (let i = 0; i &lt; cookies.length; i++) {&#10;            const cookie = cookies[i].trim();&#10;            // cookie = &quot;csrftoken=abc123&quot;&#10;            if (cookie.substring(0, name.length + 1) === (name + '=')) {&#10;                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));&#10;                break;&#10;            }&#10;        }&#10;    }&#10;    return cookieValue;&#10;}&#10;&#10;function toggleFavorite() {&#10;    const fileId = document.getElementById('favoriteBtn')?.getAttribute('data-file-id');&#10;    const btn = document.getElementById('favoriteBtn');&#10;    const icon = document.getElementById('favoriteIcon');&#10;    const text = document.getElementById('favoriteText');&#10;    &#10;    if (!fileId || !btn || !icon || !text) return;&#10;&#10;    fetch(`/toggle-favorite/${fileId}/`, {&#10;        method: 'POST',&#10;        headers: {&#10;            'X-CSRFToken': getCookie('csrftoken'),&#10;            'Content-Type': 'application/json',&#10;        },&#10;    })&#10;    .then(response =&gt; response.json())&#10;    .then(data =&gt; {&#10;        if (data.success) {&#10;            if (data.is_favorited) {&#10;                icon.classList.remove('far');&#10;                icon.classList.add('fas');&#10;                text.textContent = 'Bỏ yêu thích';&#10;                btn.classList.remove('btn-outline-danger');&#10;                btn.classList.add('btn-danger');&#10;            } else {&#10;        icon.classList.remove('fas');&#10;        icon.classList.add('far');&#10;                text.textContent = 'Thêm vào yêu thích';&#10;                btn.classList.remove('btn-danger');&#10;                btn.classList.add('btn-outline-danger');&#10;            }&#10;            &#10;            // Show success message&#10;            const toast = document.createElement('div');&#10;            toast.className = 'alert alert-success position-fixed';&#10;            toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';&#10;            toast.textContent = data.message;&#10;            document.body.appendChild(toast);&#10;            &#10;            setTimeout(() =&gt; {&#10;                toast.remove();&#10;            }, 3000);&#10;        }&#10;    })&#10;    .catch(error =&gt; {&#10;        console.error('Error:', error);&#10;        alert('Có lỗi xảy ra. Vui lòng thử lại.');&#10;    });&#10;}&#10;&#10;// Track file views (could be enhanced with analytics)&#10;if (typeof gtag !== 'undefined') {&#10;    gtag('event', 'file_view', {&#10;        'file_title': '{{ file.title }}',&#10;        'file_author': '{{ file.author.username }}'&#10;    });&#10;}&#10;&#10;// Enhanced notification system&#10;function enhanceNotifications() {&#10;    const alerts = document.querySelectorAll('.alert');&#10;    &#10;    alerts.forEach((alert, index) =&gt; {&#10;        // Add staggered animation delay&#10;        alert.style.animationDelay = `${index * 0.15}s`;&#10;        &#10;        // Auto-hide after 6 seconds for info messages (trừ điểm)&#10;        if (alert.classList.contains('alert-info')) {&#10;            setTimeout(() =&gt; {&#10;                if (alert.parentNode) {&#10;                    alert.style.animation = 'slideOutRight 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';&#10;                    setTimeout(() =&gt; {&#10;                        if (alert.parentNode) {&#10;                            alert.remove();&#10;                        }&#10;                    }, 500);&#10;                }&#10;            }, 6000);&#10;        }&#10;        &#10;        // Auto-hide after 8 seconds for success messages (cộng điểm)&#10;        if (alert.classList.contains('alert-success')) {&#10;            setTimeout(() =&gt; {&#10;                if (alert.parentNode) {&#10;                    alert.style.animation = 'slideOutRight 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';&#10;                    setTimeout(() =&gt; {&#10;                        if (alert.parentNode) {&#10;                            alert.remove();&#10;                        }&#10;                    }, 500);&#10;                }&#10;            }, 8000);&#10;        }&#10;        &#10;        // Enhanced close button with smooth animation&#10;        const closeBtn = alert.querySelector('.btn-close');&#10;        if (closeBtn) {&#10;            closeBtn.addEventListener('click', function() {&#10;                alert.style.animation = 'slideOutRight 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards';&#10;                setTimeout(() =&gt; {&#10;                    if (alert.parentNode) {&#10;                        alert.remove();&#10;                    }&#10;                }, 500);&#10;            });&#10;        }&#10;        &#10;        // Add subtle entrance effect&#10;        alert.style.opacity = '0';&#10;        alert.style.transform = 'translateX(100%) scale(0.95)';&#10;        &#10;        setTimeout(() =&gt; {&#10;            alert.style.transition = 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)';&#10;            alert.style.opacity = '1';&#10;            alert.style.transform = 'translateX(0) scale(1)';&#10;        }, index * 150);&#10;    });&#10;}&#10;&#10;// Add slideOutRight animation to CSS&#10;const style = document.createElement('style');&#10;style.textContent = `&#10;    @keyframes slideOutRight {&#10;        from {&#10;            transform: translateX(0) scale(1);&#10;            opacity: 1;&#10;        }&#10;        to {&#10;            transform: translateX(100%) scale(0.95);&#10;            opacity: 0;&#10;        }&#10;    }&#10;`;&#10;document.head.appendChild(style);" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>